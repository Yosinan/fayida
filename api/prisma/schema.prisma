generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String
  firstName          String
  lastName           String
  role               String    // "student" | "instructor" | "admin"
  phoneNumber        String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  // relations
  sessions           Session[]
  streak             Streak?
  // For reporting minimal relations:
  courses            Course[]  @relation("InstructorCourses", fields: [], references: [])
  enrollments        Enrollment[]
  orders             Order[]
  reviews            Review[]
  queries            Query[]
}

model Session {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  refreshToken  String
  deviceId      String?    // client-provided device id
  deviceInfo    String?    // user agent info
  isValid       Boolean   @default(true)
  createdAt     DateTime  @default(now())
  lastSeenAt    DateTime? 
  expiresAt     DateTime?
}

model Streak {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  count        Int      @default(0)
  lastLoginAt  DateTime?
}

model Course {
  id         Int      @id @default(autoincrement())
  title      String
  instructor User?    @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int?
  // minimal for reporting
  enrollments Enrollment[]
}

model Enrollment {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  course    Course @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())
}

model Order {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  amount    Float
  createdAt DateTime @default(now())
}

model Review {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
  rating     Int
  createdAt  DateTime @default(now())
}

model Query {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  body      String
  status    String  @default("open")
  createdAt DateTime @default(now())
}